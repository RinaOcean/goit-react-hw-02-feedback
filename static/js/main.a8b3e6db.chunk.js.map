{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Notifications/Notifications.jsx","components/StatisticsCounter/StatisticsCounter.jsx","App.js","index.js"],"names":["Section","title","children","className","defaultProps","FeedbackOptions","options","onLeaveFeedback","map","btnName","iconName","id","btnClassList","join","iconClassList","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","nowGood","nowNeutral","Math","ceil","nowBad","ProgressBar","variant","now","label","Notifications","message","StatisticsCounter","state","event","currValue","target","classList","contains","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","this","btnOptions","class","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8b3e6db.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport './Section.scss';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section className=\"Section\">\r\n    <h1 className=\"Section__title\">{title}</h1>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nexport default Section;\r\n\r\nSection.defaultProps = {\r\n  title: '',\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n","import React from 'react';\r\nimport './FeedbackOptions.scss';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <div className=\"FeedbackOptions\">\r\n    {options.map(({ btnName, iconName, id }) => {\r\n      const btnClassList = ['FeedbackOptions__btn', btnName].join(' ');\r\n      const iconClassList = ['material-icons icon', 'icon', btnName].join(' ');\r\n\r\n      return (\r\n        <button\r\n          key={id}\r\n          className={btnClassList}\r\n          type=\"button\"\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          <span className={iconClassList}>{iconName}</span>\r\n          {btnName}\r\n        </button>\r\n      );\r\n    })}\r\n\r\n    {/* <button\r\n      className=\"FeedbackOptions__btn good\"\r\n      type=\"button\"\r\n      onClick={onLeaveFeedback}\r\n    >\r\n      <span className=\"material-icons icon good\">mood</span>\r\n      Good\r\n    </button>\r\n    <button\r\n      className=\"FeedbackOptions__btn neutral\"\r\n      type=\"button\"\r\n      onClick={onLeaveFeedback}\r\n    >\r\n      <span className=\"material-icons icon neutral\">sentiment_neutral</span>\r\n      Neutral\r\n    </button>\r\n    <button\r\n      className=\"FeedbackOptions__btn bad\"\r\n      type=\"button\"\r\n      onClick={onLeaveFeedback}\r\n    >\r\n      <span className=\"material-icons icon bad\">\r\n        sentiment_very_dissatisfied\r\n      </span>\r\n      Bad\r\n    </button> */}\r\n  </div>\r\n);\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\nimport PropTypes from 'prop-types';\r\nimport './Statistics.scss';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  const nowGood = positivePercentage;\r\n  const nowNeutral = Math.ceil((neutral * 100) / total);\r\n  const nowBad = Math.ceil((bad * 100) / total);\r\n  return (\r\n    <>\r\n      <ProgressBar variant=\"success\" now={nowGood} label={`${nowGood}%`} />\r\n      <p className=\"Statistics__item\">Good: {good}</p>\r\n      <ProgressBar\r\n        variant=\"warning\"\r\n        now={nowNeutral}\r\n        label={`${nowNeutral}%`}\r\n      />\r\n      <p className=\"Statistics__item\">Neutral: {neutral}</p>\r\n      <ProgressBar variant=\"danger\" now={nowBad} label={`${nowBad}%`} />\r\n      <p className=\"Statistics__item\">Bad: {bad}</p>\r\n      <p className=\"Statistics__item\">Total: {total}</p>\r\n      <p className=\"Statistics__item\">\r\n        Positive feedback: {positivePercentage}%\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notifications = ({ message }) => (\r\n  <p className=\"Notifications\">{message}</p>\r\n);\r\n\r\nexport default Notifications;\r\n\r\nNotifications.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Section from '../Section';\r\nimport FeedbackOptions from '../FeedbackOptions';\r\nimport Statistics from '../Statistics';\r\nimport Notifications from '../Notifications';\r\n\r\nimport btnOptions from '../../btnOptions.json';\r\n\r\nclass StatisticsCounter extends Component {\r\n  static propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n  };\r\n\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  onLeaveFeedback = event => {\r\n    const currValue = event.target.classList;\r\n\r\n    if (currValue.contains('good')) {\r\n      this.setState(prevState => ({\r\n        good: prevState.good + 1,\r\n      }));\r\n      return;\r\n    }\r\n    if (currValue.contains('neutral')) {\r\n      this.setState(prevState => ({\r\n        neutral: prevState.neutral + 1,\r\n      }));\r\n      return;\r\n    }\r\n    if (currValue.contains('bad')) {\r\n      this.setState(prevState => ({\r\n        bad: prevState.bad + 1,\r\n      }));\r\n      return;\r\n    }\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const total = this.state.good + this.state.neutral + this.state.bad;\r\n    return total;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const total = this.countTotalFeedback();\r\n    const percentage = Math.ceil((this.state.good * 100) / total);\r\n    return percentage;\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    return (\r\n      <>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={btnOptions}\r\n            onLeaveFeedback={this.onLeaveFeedback}\r\n          />\r\n        </Section>\r\n\r\n        <Section class=\"section_statistics\" title=\"Statistics\">\r\n          {this.state.good > 0 ||\r\n          this.state.neutral > 0 ||\r\n          this.state.bad > 0 ? (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={this.countTotalFeedback()}\r\n              positivePercentage={this.countPositiveFeedbackPercentage()}\r\n            ></Statistics>\r\n          ) : (\r\n            <Notifications message=\"No feedback given\"></Notifications>\r\n          )}\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticsCounter;\r\n","import StatisticsCounter from './components/StatisticsCounter';\nimport './App.scss';\n\nfunction App() {\n  return <StatisticsCounter />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}